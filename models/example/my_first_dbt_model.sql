
/*
    Welcome to your first dbt model!
    Did you know that you can also configure models directly within SQL files?
    This will override configurations stated in dbt_project.yml

    Try changing "table" to "view" below
*/

{{ config(materialized='table') }}

/*DIM_CUSTOMER Table*/

/*Insert statement to Insert records update comes from source*/
INSERT
	INTO
	FIVETRAN_DATABASE.DWH.DIM_CUSTOMER (
CUSTOMER_ID,
	FIRST_NAME,
	LAST_NAME,
	DOB,
	PHONE_NUMBER,
	EMAIL_ADDRESS,
	ADDRESS_ID,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG)
SELECT
	SRC.CUSTOMER_ID,
	SRC.FIRST_NAME,
	SRC.LAST_NAME,
	SRC.DOB,
	SRC.PHONE_NUMBER,
	SRC.EMAIL_ADDRESS,
	SRC.ADDRESS_ID,
	'N',
	'Y'
FROM
	FIVETRAN_DATABASE.DWH.DIM_CUSTOMER TGT
INNER JOIN FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.CUSTMER_INFO SRC
ON
	TGT.CUSTOMER_ID = SRC.CUSTOMER_ID
	AND (NVL(TGT.FIRST_NAME,'NA') != NVL(SRC.FIRST_NAME,'NA')
	OR NVL(TGT.LAST_NAME,'NA') != NVL(SRC.LAST_NAME,'NA')
	OR TGT.DOB != SRC.DOB
	OR NVL(TGT.PHONE_NUMBER,'NA') != NVL(SRC.PHONE_NUMBER,'NA')
	OR NVL(TGT.EMAIL_ADDRESS,'NA') != NVL(SRC.EMAIL_ADDRESS,'NA')
	OR NVL(TGT.ADDRESS_ID,'NA') != NVL(SRC.ADDRESS_ID,'NA'))
	AND TGT.ACTIVE_FLAG = 'Y' ;

/*Merge statement to Insert new records and mark previous as inactive if any update comes from source*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_CUSTOMER TGT
		USING FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.CUSTMER_INFO SRC
ON
	(TGT.CUSTOMER_ID = SRC.CUSTOMER_ID)
	WHEN MATCHED
	AND (NVL(TGT.FIRST_NAME,'NA') != NVL(SRC.FIRST_NAME,'NA')
	OR NVL(TGT.LAST_NAME,'NA') != NVL(SRC.LAST_NAME,'NA')
	OR TGT.DOB != SRC.DOB
	OR NVL(TGT.PHONE_NUMBER,'NA') != NVL(SRC.PHONE_NUMBER,'NA')
	OR NVL(TGT.EMAIL_ADDRESS,'NA') != NVL(SRC.EMAIL_ADDRESS,'NA')
	OR NVL(TGT.ADDRESS_ID,'NA') != NVL(SRC.ADDRESS_ID,'NA'))
	AND TGT.ACTIVE_FLAG = 'Y' THEN
UPDATE
SET
	TGT.UPDATE_DATE = CURRENT_TIMESTAMP(),
	TGT.UPDATE_USER = CURRENT_USER()|| '_Updated',
	TGT.ACTIVE_FLAG = 'N'
	WHEN NOT MATCHED THEN
INSERT
	(CUSTOMER_ID,
	FIRST_NAME,
	LAST_NAME,
	DOB,
	PHONE_NUMBER,
	EMAIL_ADDRESS,
	ADDRESS_ID,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG)
VALUES(
	SRC.CUSTOMER_ID,
	SRC.FIRST_NAME,
	SRC.LAST_NAME,
	SRC.DOB,
	SRC.PHONE_NUMBER,
	SRC.EMAIL_ADDRESS,
	SRC.ADDRESS_ID,
	'N',
	'Y');

/*Merge statement to mark soft delete records*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_CUSTOMER TGT
		USING (
	SELECT
		TGT.CUSTOMER_KEY
	FROM
		FIVETRAN_DATABASE.DWH.DIM_CUSTOMER TGT
	WHERE
		NOT EXISTS (
		SELECT
			1
		FROM
			FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.CUSTMER_INFO A
		WHERE
			TGT.CUSTOMER_ID = A.CUSTOMER_ID)) SRC
ON
	(TGT.CUSTOMER_KEY = SRC.CUSTOMER_KEY)
	WHEN MATCHED
	AND TGT.ACTIVE_FLAG = 'Y'
	AND TGT.SOFT_DELETE_FLAG != 'Y' THEN
UPDATE
SET
	TGT.DELETE_DATE = CURRENT_TIMESTAMP(),
	TGT.DELETE_USER = CURRENT_USER()|| '_Deleted',
	TGT.SOFT_DELETE_FLAG = 'Y',
	TGT.ACTIVE_FLAG = 'N';

-----------------------------------------------------------

/*DIM_ADDRESS Table*/

/*Insert statement to Insert records update comes from source*/
INSERT
	INTO
	FIVETRAN_DATABASE.DWH.DIM_ADDRESS (ADDRESS_ID,
	COUNTRY,
	COUNTY,
	STATE,
	CITY,
	STREET_NAME,
	ZIP,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG
	)
SELECT
	SRC.ADDRESS_ID,
	SRC.COUNTRY,
	SRC.COUNTY,
	SRC.STATE,
	SRC.CITY,
	SRC.STREET_NAME,
	SRC.ZIP,
	'N',
	'Y'
FROM
	FIVETRAN_DATABASE.DWH.DIM_ADDRESS TGT
INNER JOIN FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.CUSTMER_INFO SRC
ON
	TGT.ADDRESS_ID = SRC.ADDRESS_ID
	AND (NVL(TGT.COUNTRY,'NA') != NVL(SRC.COUNTRY,'NA')
	OR NVL(TGT.COUNTY,'NA') != NVL(SRC.COUNTY,'NA')
	OR NVL(TGT.STATE,'NA') != NVL(SRC.STATE,'NA')
	OR NVL(TGT.CITY,'NA') != NVL(SRC.CITY,'NA')
	OR NVL(TGT.STREET_NAME,'NA') != NVL(SRC.STREET_NAME,'NA')
	OR NVL(TGT.ZIP,'NA') != NVL(SRC.ZIP,'NA'))
	AND TGT.ACTIVE_FLAG = 'Y' ;

/*Merge statement to Insert new records and mark previous as inactive if any update comes from source*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_ADDRESS TGT
		USING FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.CUSTMER_INFO SRC
ON
	(TGT.ADDRESS_ID = SRC.ADDRESS_ID)
	WHEN MATCHED
	AND (NVL(TGT.COUNTRY,'NA') != NVL(SRC.COUNTRY,'NA')
	OR NVL(TGT.COUNTY,'NA') != NVL(SRC.COUNTY,'NA')
	OR NVL(TGT.STATE,'NA') != NVL(SRC.STATE,'NA')
	OR NVL(TGT.CITY,'NA') != NVL(SRC.CITY,'NA')
	OR NVL(TGT.STREET_NAME,'NA') != NVL(SRC.STREET_NAME,'NA')
	OR NVL(TGT.ZIP,'NA') != NVL(SRC.ZIP,'NA'))
	AND TGT.ACTIVE_FLAG = 'Y' THEN
UPDATE
SET
	TGT.UPDATE_DATE = CURRENT_TIMESTAMP(),
	TGT.UPDATE_USER = CURRENT_USER()|| '_Updated',
	TGT.ACTIVE_FLAG = 'N'
	WHEN NOT MATCHED THEN
INSERT
	(ADDRESS_ID,
	COUNTRY,
	COUNTY,
	STATE,
	CITY,
	STREET_NAME,
	ZIP,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG)
VALUES(
	SRC.ADDRESS_ID,
	SRC.COUNTRY,
	SRC.COUNTY,
	SRC.STATE,
	SRC.CITY,
	SRC.STREET_NAME,
	SRC.ZIP,
	'N',
	'Y');

/*Merge statement to mark soft delete records*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_ADDRESS TGT
		USING (
	SELECT
		TGT.ADDRESS_KEY
	FROM
		FIVETRAN_DATABASE.DWH.DIM_ADDRESS TGT
	WHERE
		NOT EXISTS (
		SELECT
			1
		FROM
			FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.CUSTMER_INFO A
		WHERE
			TGT.ADDRESS_ID = A.ADDRESS_ID)) SRC
ON
	(TGT.ADDRESS_KEY = SRC.ADDRESS_KEY)
	WHEN MATCHED
	AND TGT.ACTIVE_FLAG = 'Y'
	AND TGT.SOFT_DELETE_FLAG != 'Y' THEN
UPDATE
SET
	TGT.DELETE_DATE = CURRENT_TIMESTAMP(),
	TGT.DELETE_USER = CURRENT_USER()|| '_Deleted',
	TGT.SOFT_DELETE_FLAG = 'Y',
	TGT.ACTIVE_FLAG = 'N';

-----------------------------------------------------------

/*DIM_STORE Table*/

/*Insert statement to Insert records update comes from source*/
INSERT
	INTO
	FIVETRAN_DATABASE.DWH.DIM_STORE (
	STORE_ID,
	STORE_NAME,
	NUMBER_EMPLOYEES,
	MANAGER_NAME,
	WORKING_HOURS,
	ADDRESS_ID,
	IS_OPERATING,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG
	)
SELECT
	SRC.STORE_ID,
	SRC.STORE_NAME,
	SRC.NUMBER_EMPLOYEES,
	SRC.MANAGER_NAME,
	SRC.WORKING_HOURS,
	SRC.ADDRESS_ID,
	'Y',
	'N',
	'Y'
FROM
	FIVETRAN_DATABASE.DWH.DIM_STORE TGT
INNER JOIN (
	SELECT
		SRC.*,
		ADR.ADDRESS_ID
	FROM
		FIVETRAN_DATABASE.AZURE_BLOB_STORAGE_STAGING.AZURE_CSV_FILES SRC
	LEFT OUTER JOIN FIVETRAN_DATABASE.DWH.DIM_ADDRESS ADR
	ON
		ADR.COUNTRY = SRC.STORE_COUNTRY
		AND ADR.COUNTY = SRC.STORE_COUNTY
		AND ADR.STATE = SRC.STORE_STATE
		AND ADR.CITY = SRC.STORE_CITY
		AND ADR.STREET_NAME = SRC.STORE_STREET_NAME
		AND ADR.ZIP = SRC.STORE_ZIP
		WHERE SRC._FILE = 'STORE_INFO.csv') SRC
ON
	TGT.STORE_ID = SRC.STORE_ID
	AND (NVL(TGT.STORE_NAME,'NA') != NVL(SRC.STORE_NAME,'NA')
	OR NVL(TGT.NUMBER_EMPLOYEES,-1) != NVL(SRC.NUMBER_EMPLOYEES,-1)
	OR NVL(TGT.MANAGER_NAME,'NA') != NVL(SRC.MANAGER_NAME,'NA')
	OR NVL(TGT.WORKING_HOURS,'NA') != NVL(SRC.WORKING_HOURS,'NA')
	OR NVL(TGT.ADDRESS_ID,'NA') != NVL(SRC.ADDRESS_ID,'NA'))
	AND TGT.ACTIVE_FLAG = 'Y';

/*Merge statement to Insert new records and mark previous as inactive if any update comes from source*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_STORE TGT
		USING (
	SELECT
		SRC.*,
		ADR.ADDRESS_ID
	FROM
		FIVETRAN_DATABASE.AZURE_BLOB_STORAGE_STAGING.AZURE_CSV_FILES SRC
	LEFT OUTER JOIN FIVETRAN_DATABASE.DWH.DIM_ADDRESS ADR
	ON
		ADR.COUNTRY = SRC.STORE_COUNTRY
		AND ADR.COUNTY = SRC.STORE_COUNTY
		AND ADR.STATE = SRC.STORE_STATE
		AND ADR.CITY = SRC.STORE_CITY
		AND ADR.STREET_NAME = SRC.STORE_STREET_NAME
		AND ADR.ZIP = SRC.STORE_ZIP
		WHERE SRC._FILE = 'STORE_INFO.csv') SRC
ON
	(TGT.STORE_ID = SRC.STORE_ID)
	WHEN MATCHED
	AND (NVL(TGT.STORE_NAME,'NA') != NVL(SRC.STORE_NAME,'NA')
	OR NVL(TGT.NUMBER_EMPLOYEES,-1) != NVL(SRC.NUMBER_EMPLOYEES,-1)
	OR NVL(TGT.MANAGER_NAME,'NA') != NVL(SRC.MANAGER_NAME,'NA')
	OR NVL(TGT.WORKING_HOURS,'NA') != NVL(SRC.WORKING_HOURS,'NA')
	OR NVL(TGT.ADDRESS_ID,'NA') != NVL(SRC.ADDRESS_ID,'NA'))
	AND TGT.ACTIVE_FLAG = 'Y' THEN
UPDATE
SET
	TGT.UPDATE_DATE = CURRENT_TIMESTAMP(),
	TGT.UPDATE_USER = CURRENT_USER()|| '_Updated',
	TGT.ACTIVE_FLAG = 'N'
	WHEN NOT MATCHED THEN
INSERT
	(
	STORE_ID,
	STORE_NAME,
	NUMBER_EMPLOYEES,
	MANAGER_NAME,
	WORKING_HOURS,
	ADDRESS_ID,
	IS_OPERATING,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG
	)
VALUES(
	SRC.STORE_ID,
	SRC.STORE_NAME,
	SRC.NUMBER_EMPLOYEES,
	SRC.MANAGER_NAME,
	SRC.WORKING_HOURS,
	SRC.ADDRESS_ID,
	'Y',
	'N',
	'Y');

/*Merge statement to mark soft delete records*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_STORE TGT
		USING (
	SELECT
		TGT.STORE_KEY
	FROM
		FIVETRAN_DATABASE.DWH.DIM_STORE TGT
	WHERE
		NOT EXISTS (
		SELECT
			1
		FROM
			FIVETRAN_DATABASE.AZURE_BLOB_STORAGE_STAGING.AZURE_CSV_FILES A
		WHERE
			TGT.STORE_ID = A.STORE_ID AND A._FILE = 'STORE_INFO.csv')) SRC
ON
	(TGT.STORE_KEY = SRC.STORE_KEY)
	WHEN MATCHED
	AND TGT.ACTIVE_FLAG = 'Y'
	AND TGT.SOFT_DELETE_FLAG != 'Y' THEN
UPDATE
SET
	TGT.DELETE_DATE = CURRENT_TIMESTAMP(),
	TGT.DELETE_USER = CURRENT_USER()|| '_Deleted',
	TGT.SOFT_DELETE_FLAG = 'Y',
	TGT.ACTIVE_FLAG = 'N';

-----------------------------------------------------------

/*DIM_ITEM Table*/

/*Insert statement to Insert records update comes from source*/
INSERT
	INTO
	FIVETRAN_DATABASE.DWH.DIM_ITEM (
	ITEM_ID,
	PROMO_ID,
	ITEM_DESC,
	CURRENT_PRICE,
	MAX_SELLING_PRICE,
	WHOLESALE_PRICE,
	BRAND,
	SIZE,
	MANUFACT,
	START_DATE,
	END_DATE,
	ITEM_ACTIVE,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG
	)
SELECT
	SRC.ITEM_ID,
	SRC.PROMO_ID,
	SRC.ITEM_DESC,
	SRC.CURRENT_PRICE,
	SRC.CURRENT_PRICE,
	SRC.WHOLESALE_PRICE,
	SRC.BRAND,
	SRC.SIZE,
	SRC.MANUFACT,
	SRC.START_DATE,
	SRC.END_DATE,
	'Y',
	'N',
	'Y'
FROM
	FIVETRAN_DATABASE.DWH.DIM_ITEM TGT
INNER JOIN FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.ITEM_INFO SRC
ON
	TGT.ITEM_ID = SRC.ITEM_ID
	AND (NVL(TGT.PROMO_ID,-1) != NVL(SRC.PROMO_ID,-1)
	OR NVL(TGT.ITEM_DESC,'NA') != NVL(SRC.ITEM_DESC,'NA')
	OR NVL(TGT.CURRENT_PRICE,-1) != NVL(SRC.CURRENT_PRICE,-1)
	OR NVL(TGT.MAX_SELLING_PRICE,-1) != NVL(SRC.CURRENT_PRICE,-1)
	OR NVL(TGT.WHOLESALE_PRICE,-1) != NVL(SRC.WHOLESALE_PRICE,-1)
	OR NVL(TGT.BRAND,'NA') != NVL(SRC.BRAND,'NA')
	OR NVL(TGT.SIZE,'NA') != NVL(SRC.SIZE,'NA')
	OR NVL(TGT.MANUFACT,'NA') != NVL(SRC.MANUFACT,'NA'))
	AND TGT.ACTIVE_FLAG = 'Y' ;

/*Merge statement to Insert new records and mark previous as inactive if any update comes from source*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_ITEM TGT
		USING FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.ITEM_INFO SRC
ON
	(TGT.ITEM_ID = SRC.ITEM_ID)
	WHEN MATCHED
	AND (NVL(TGT.PROMO_ID,-1) != NVL(SRC.PROMO_ID,-1)
	OR NVL(TGT.ITEM_DESC,'NA') != NVL(SRC.ITEM_DESC,'NA')
	OR NVL(TGT.CURRENT_PRICE,-1) != NVL(SRC.CURRENT_PRICE,-1)
	OR NVL(TGT.MAX_SELLING_PRICE,-1) != NVL(SRC.CURRENT_PRICE,-1)
	OR NVL(TGT.WHOLESALE_PRICE,-1) != NVL(SRC.WHOLESALE_PRICE,-1)
	OR NVL(TGT.BRAND,'NA') != NVL(SRC.BRAND,'NA')
	OR NVL(TGT.SIZE,'NA') != NVL(SRC.SIZE,'NA')
	OR NVL(TGT.MANUFACT,'NA') != NVL(SRC.MANUFACT,'NA'))
	AND TGT.ACTIVE_FLAG = 'Y' THEN
UPDATE
SET
	TGT.UPDATE_DATE = CURRENT_TIMESTAMP(),
	TGT.UPDATE_USER = CURRENT_USER()|| '_Updated',
	TGT.ACTIVE_FLAG = 'N'
	WHEN NOT MATCHED THEN
INSERT
	(ITEM_ID,
	PROMO_ID,
	ITEM_DESC,
	CURRENT_PRICE,
	MAX_SELLING_PRICE,
	WHOLESALE_PRICE,
	BRAND,
	SIZE,
	MANUFACT,
	START_DATE,
	END_DATE,
	ITEM_ACTIVE,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG
	)
VALUES(
	SRC.ITEM_ID,
	SRC.PROMO_ID,
	SRC.ITEM_DESC,
	SRC.CURRENT_PRICE,
	SRC.CURRENT_PRICE,
	SRC.WHOLESALE_PRICE,
	SRC.BRAND,
	SRC.SIZE,
	SRC.MANUFACT,
	SRC.START_DATE,
	SRC.END_DATE,
	'Y',
	'N',
	'Y');

/*Merge statement to mark soft delete records*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_ITEM TGT
		USING (
	SELECT
		TGT.ITEM_KEY
	FROM
		FIVETRAN_DATABASE.DWH.DIM_ITEM TGT
	WHERE
		NOT EXISTS (
		SELECT
			1
		FROM
			FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.ITEM_INFO A
		WHERE
			TGT.ITEM_ID = A.ITEM_ID)) SRC
ON
	(TGT.ITEM_KEY = SRC.ITEM_KEY)
	WHEN MATCHED
	AND TGT.ACTIVE_FLAG = 'Y'
	AND TGT.SOFT_DELETE_FLAG != 'Y' THEN
UPDATE
SET
	TGT.DELETE_DATE = CURRENT_TIMESTAMP(),
	TGT.DELETE_USER = CURRENT_USER()|| '_Deleted',
	TGT.SOFT_DELETE_FLAG = 'Y',
	TGT.ACTIVE_FLAG = 'N';

-----------------------------------------------------------

/*DIM_PROMO Table*/

/*Insert statement to Insert records update comes from source*/
INSERT
	INTO
	FIVETRAN_DATABASE.DWH.DIM_PROMO (
	PROMO_ID,
	DISCOUNT_COST,
	PROMO_NAME,
	PROMO_TYPE,
	MIN_QTY,
	MAX_QTY,
	START_DATE,
	END_DATE,
	DISCOUNT_ACTIVE,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG
	)
SELECT
	SRC.PROMO_ID,
	SRC.DISCOUNT_COST,
	SRC.PROMO_NAME,
	SRC.PROMO_TYPE,
	SRC.MIN_QTY,
	SRC.MAX_QTY,
	SRC.START_DATE,
	SRC.END_DATE,
	SRC.DISCOUNT_ACTIVE,
	'N',
	'Y'
FROM
	FIVETRAN_DATABASE.DWH.DIM_PROMO TGT
INNER JOIN (SELECT * FROM FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.ITEM_INFO WHERE PROMO_ID IS NOT NULL) SRC
ON
	TGT.PROMO_ID = SRC.PROMO_ID
	AND (NVL(TGT.DISCOUNT_COST,-1) != NVL(SRC.DISCOUNT_COST,-1)
	OR NVL(TGT.PROMO_NAME,'NA') != NVL(SRC.PROMO_NAME,'NA')
	OR NVL(TGT.MIN_QTY,-1) != NVL(SRC.MIN_QTY,-1)
	OR NVL(TGT.MAX_QTY,-1) != NVL(SRC.MAX_QTY,-1)
	OR NVL(TGT.PROMO_TYPE,'NA') != NVL(SRC.PROMO_TYPE,'NA')
	OR NVL(TGT.DISCOUNT_ACTIVE,'NA') != NVL(SRC.DISCOUNT_ACTIVE,'NA'))
	AND TGT.ACTIVE_FLAG = 'Y' AND SRC.PROMO_ID IS NOT NULL;

/*Merge statement to Insert new records and mark previous as inactive if any update comes from source*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_PROMO TGT
		USING (SELECT * FROM FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.ITEM_INFO WHERE PROMO_ID IS NOT NULL) SRC
ON
	(TGT.PROMO_ID = SRC.PROMO_ID)
	WHEN MATCHED
	AND (NVL(TGT.DISCOUNT_COST,-1) != NVL(SRC.DISCOUNT_COST,-1)
	OR NVL(TGT.PROMO_NAME,'NA') != NVL(SRC.PROMO_NAME,'NA')
	OR NVL(TGT.MIN_QTY,-1) != NVL(SRC.MIN_QTY,-1)
	OR NVL(TGT.MAX_QTY,-1) != NVL(SRC.MAX_QTY,-1)
	OR NVL(TGT.PROMO_TYPE,'NA') != NVL(SRC.PROMO_TYPE,'NA')
	OR NVL(TGT.DISCOUNT_ACTIVE,'NA') != NVL(SRC.DISCOUNT_ACTIVE,'NA'))
	AND TGT.ACTIVE_FLAG = 'Y'  THEN
UPDATE
SET
	TGT.UPDATE_DATE = CURRENT_TIMESTAMP(),
	TGT.UPDATE_USER = CURRENT_USER()|| '_Updated',
	TGT.ACTIVE_FLAG = 'N'
	WHEN NOT MATCHED THEN
INSERT
	(
	PROMO_ID,
	DISCOUNT_COST,
	PROMO_NAME,
	PROMO_TYPE,
	MIN_QTY,
	MAX_QTY,
	START_DATE,
	END_DATE,
	DISCOUNT_ACTIVE,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG
	)
VALUES(
	SRC.PROMO_ID,
	SRC.DISCOUNT_COST,
	SRC.PROMO_NAME,
	SRC.PROMO_TYPE,
	SRC.MIN_QTY,
	SRC.MAX_QTY,
	SRC.START_DATE,
	SRC.END_DATE,
	SRC.DISCOUNT_ACTIVE,
	'N',
	'Y');

/*Merge statement to mark soft delete records*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_PROMO TGT
		USING (
	SELECT
		TGT.PROMO_KEY
	FROM
		FIVETRAN_DATABASE.DWH.DIM_PROMO TGT
	WHERE
		NOT EXISTS (
		SELECT
			1
		FROM
			FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.ITEM_INFO A
		WHERE
			TGT.PROMO_ID = A.PROMO_ID AND A.PROMO_ID IS NOT NULL)) SRC
ON
	(TGT.PROMO_KEY = SRC.PROMO_KEY)
	WHEN MATCHED
	AND TGT.ACTIVE_FLAG = 'Y'
	AND TGT.SOFT_DELETE_FLAG != 'Y' THEN
UPDATE
SET
	TGT.DELETE_DATE = CURRENT_TIMESTAMP(),
	TGT.DELETE_USER = CURRENT_USER()|| '_Deleted',
	TGT.SOFT_DELETE_FLAG = 'Y',
	TGT.ACTIVE_FLAG = 'N';

-----------------------------------------------------------

/*DIM_TAX Table*/

/*Insert statement to Insert records update comes from source*/
INSERT
	INTO
	FIVETRAN_DATABASE.DWH.DIM_TAX (
	TAX_ID,
	TERRITORY_GROUP_NAME,
	TERRITORY_NAME,
	COUNTRY_CODE,
	COUNTRY_NAME,
	STATE_CODE,
	STATE_NAME,
	TAX_NAME,
	TAX_TYPE,
	TAX_RATE,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG
	)
SELECT
	SRC.TAX_ID,
	SRC.TERRITORY_GROUP_NAME,
	SRC.TERRITORY_NAME,
	SRC.COUNTRY_CODE,
	SRC.COUNTRY_NAME,
	SRC.STATE_CODE,
	SRC.STATE_NAME,
	SRC.TAX_NAME,
	SRC.TAX_TYPE,
	SRC.TAX_RATE,
	'N',
	'Y'
FROM
	FIVETRAN_DATABASE.DWH.DIM_TAX TGT
INNER JOIN (
	SELECT
		*
	FROM
		FIVETRAN_DATABASE.AZURE_BLOB_STORAGE_STAGING.AZURE_CSV_FILES SRC
	WHERE
		SRC._FILE = 'TAX_INFO.csv') SRC
ON
	TGT.TAX_ID = SRC.TAX_ID
	AND (NVL(TGT.TERRITORY_GROUP_NAME,'NA') != NVL(SRC.TERRITORY_GROUP_NAME,'NA')
	OR NVL(TGT.TERRITORY_NAME,'NA') != NVL(SRC.TERRITORY_NAME,'NA')
	OR NVL(TGT.COUNTRY_CODE,'NA') != NVL(SRC.COUNTRY_CODE,'NA')
	OR NVL(TGT.COUNTRY_NAME,'NA') != NVL(SRC.COUNTRY_NAME,'NA')
	OR NVL(TGT.STATE_CODE,'NA') != NVL(SRC.STATE_CODE,'NA')
	OR NVL(TGT.STATE_NAME,'NA') != NVL(SRC.STATE_NAME,'NA')
	OR NVL(TGT.TAX_NAME,'NA') != NVL(SRC.TAX_NAME,'NA')
	OR NVL(TGT.TAX_TYPE,-1) != NVL(SRC.TAX_TYPE,-1)
	OR NVL(TGT.TAX_RATE,-1) != NVL(SRC.TAX_RATE,-1))
	AND TGT.ACTIVE_FLAG = 'Y';

/*Merge statement to Insert new records and mark previous as inactive if any update comes from source*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_TAX TGT
		USING (
	SELECT
		*
	FROM
		FIVETRAN_DATABASE.AZURE_BLOB_STORAGE_STAGING.AZURE_CSV_FILES SRC
	WHERE
		SRC._FILE = 'TAX_INFO.csv') SRC
ON
	(TGT.TAX_ID = SRC.TAX_ID)
	WHEN MATCHED
	AND (NVL(TGT.TERRITORY_GROUP_NAME,'NA') != NVL(SRC.TERRITORY_GROUP_NAME,'NA')
	OR NVL(TGT.TERRITORY_NAME,'NA') != NVL(SRC.TERRITORY_NAME,'NA')
	OR NVL(TGT.COUNTRY_CODE,'NA') != NVL(SRC.COUNTRY_CODE,'NA')
	OR NVL(TGT.COUNTRY_NAME,'NA') != NVL(SRC.COUNTRY_NAME,'NA')
	OR NVL(TGT.STATE_CODE,'NA') != NVL(SRC.STATE_CODE,'NA')
	OR NVL(TGT.STATE_NAME,'NA') != NVL(SRC.STATE_NAME,'NA')
	OR NVL(TGT.TAX_NAME,'NA') != NVL(SRC.TAX_NAME,'NA')
	OR NVL(TGT.TAX_TYPE,-1) != NVL(SRC.TAX_TYPE,-1)
	OR NVL(TGT.TAX_RATE,-1) != NVL(SRC.TAX_RATE,-1))
	AND TGT.ACTIVE_FLAG = 'Y' THEN
UPDATE
SET
	TGT.UPDATE_DATE = CURRENT_TIMESTAMP(),
	TGT.UPDATE_USER = CURRENT_USER()|| '_Updated',
	TGT.ACTIVE_FLAG = 'N'
	WHEN NOT MATCHED THEN
INSERT
	(
	TAX_ID,
	TERRITORY_GROUP_NAME,
	TERRITORY_NAME,
	COUNTRY_CODE,
	COUNTRY_NAME,
	STATE_CODE,
	STATE_NAME,
	TAX_NAME,
	TAX_TYPE,
	TAX_RATE,
	SOFT_DELETE_FLAG,
	ACTIVE_FLAG
	)
VALUES(
	SRC.TAX_ID,
	SRC.TERRITORY_GROUP_NAME,
	SRC.TERRITORY_NAME,
	SRC.COUNTRY_CODE,
	SRC.COUNTRY_NAME,
	SRC.STATE_CODE,
	SRC.STATE_NAME,
	SRC.TAX_NAME,
	SRC.TAX_TYPE,
	SRC.TAX_RATE,
	'N',
	'Y');

/*Merge statement to mark soft delete records*/
MERGE
INTO
	FIVETRAN_DATABASE.DWH.DIM_TAX TGT
		USING (
	SELECT
		TGT.TAX_KEY
	FROM
		FIVETRAN_DATABASE.DWH.DIM_TAX TGT
	WHERE
		NOT EXISTS (
		SELECT
			1
		FROM
			FIVETRAN_DATABASE.AZURE_BLOB_STORAGE_STAGING.AZURE_CSV_FILES A
		WHERE
			TGT.TAX_ID = A.TAX_ID AND A._FILE = 'TAX_INFO.csv')) SRC
ON
	(TGT.TAX_KEY = SRC.TAX_KEY)
	WHEN MATCHED
	AND TGT.ACTIVE_FLAG = 'Y'
	AND TGT.SOFT_DELETE_FLAG != 'Y' THEN
UPDATE
SET
	TGT.DELETE_DATE = CURRENT_TIMESTAMP(),
	TGT.DELETE_USER = CURRENT_USER()|| '_Deleted',
	TGT.SOFT_DELETE_FLAG = 'Y',
	TGT.ACTIVE_FLAG = 'N';

-----------------------------------------------------------

/*FACT_SALES Table*/

/*Insert statement to Insert records from source*/

INSERT
	INTO
	FIVETRAN_DATABASE.DWH.FACT_SALES (
	CUSTOMER_KEY,
	STORE_KEY,
	ITEM_KEY,
	PROMO_KEY,
	BILL_ADDRESS_KEY,
	SHIP_ADDRESS_KEY,
	ORDER_PURCHASE_KEY,
	ORDER_SHIP_KEY,
	ORDER_DUE_KEY,
	TAX_KEY,
	SALES_ORDER_NUMBER,
	PURCHASE_ORDER_NUMBER,
	SALES_PERSON_ID,
	WHOLESALE_COST,
	LIST_PRICE,
	QUANTITY,
	SALES_PRICE,
	DISCOUNT,
	TAX_AMT,
	TOTAL_WHOLESALE_COST,
	TOTAL_LIST_PRICE,
	TOTAL_SALES_PRICE,
	TOTAL_QUANTITY,
	TOTAL_DISCOUNT,
	TOTAL_TAX_AMT,
	FINAL_WHOLESALE_COST,
	FINAL_SALES_PRICE,
	MARGIN_PERCENTAGE,
	PROFIT_LOSS)
SELECT
	A.*,
	(FINAL_SALES_PRICE-FINAL_WHOLESALE_COST) AS MARGIN_PERCENTAGE,
	CASE
		WHEN FINAL_WHOLESALE_COST-FINAL_SALES_PRICE<0 THEN 'PROFIT'
		ELSE 'LOSS'
	END AS PROFIT_LOSS
FROM
	(
	SELECT
		DISTINCT 
		CUST.CUSTOMER_KEY,
		STR.STORE_KEY,
		ITM.ITEM_KEY,
		PRM.PROMO_KEY,
		ADDR.ADDRESS_KEY AS BILL_ADDRESS_KEY,
		ADDR2.ADDRESS_KEY AS SHIP_ADDRESS_KEY,
		PRC.D_DATE_KEY AS ORDER_PURCHASE_KEY,
		SHP.D_DATE_KEY AS ORDER_SHIP_KEY,
		DUE.D_DATE_KEY AS ORDER_DUE_KEY,
		TAX.TAX_KEY,
		STG.SALES_ORDER_NUMBER,
		STG.PURCHASE_ORDER_NUMBER,
		STG.SALES_PERSON_ID,
		STG.WHOLESALE_COST,
		STG.LIST_PRICE,
		STG.QUANTITY,
		STG.SALES_PRICE,
		NVL(PRM.DISCOUNT_COST,
		STG.DISCOUNT) AS DISCOUNT,
		NVL(TAX.TAX_RATE,
		STG.TAX_AMT) AS TAX_AMT,
		STG.TOTAL_WHOLESALE_COST,
		STG.TOTAL_LIST_PRICE,
		STG.TOTAL_SALES_PRICE,
		STG.QUANTITY AS TOTAL_QUANTITY,
		NVL(PRM.DISCOUNT_COST,
		STG.DISCOUNT)* STG.QUANTITY AS TOTAL_DISCOUNT,
		NVL(TAX.TAX_RATE,
		STG.TAX_AMT)* STG.QUANTITY AS TOTAL_TAX_AMT,
		STG.TOTAL_WHOLESALE_COST * NVL(TAX.TAX_RATE,
		STG.TAX_AMT) AS FINAL_WHOLESALE_COST,
		STG.TOTAL_SALES_PRICE * NVL(TAX.TAX_RATE,
		STG.TAX_AMT) AS FINAL_SALES_PRICE
	FROM
		FIVETRAN_DATABASE.AZURE_POSTGRESS_STAGING_RETAIL.SALES_INFO STG
	LEFT JOIN FIVETRAN_DATABASE.DWH.DIM_CUSTOMER CUST ON
		STG.CUSTOMER_ID = CUST.CUSTOMER_ID
		AND CUST.ACTIVE_FLAG = 'Y'
	LEFT JOIN FIVETRAN_DATABASE.DWH.DIM_STORE STR ON
		STG.STORE_ID = STR.STORE_ID
		AND STR.ACTIVE_FLAG = 'Y'
	LEFT JOIN FIVETRAN_DATABASE.DWH.DIM_ITEM ITM ON
		STG.ITEM_ID = ITM.ITEM_ID
		AND ITM.ACTIVE_FLAG = 'Y'
	LEFT JOIN FIVETRAN_DATABASE.DWH.DIM_PROMO PRM ON
		STG.PROMO_ID = PRM.PROMO_ID
		AND PRM.ACTIVE_FLAG = 'Y'
	LEFT JOIN FIVETRAN_DATABASE.DWH.DIM_ADDRESS ADDR ON
		STG.BILL_TO_ADDRESS_ID = ADDR.ADDRESS_ID
		AND ADDR.ACTIVE_FLAG = 'Y'
	LEFT JOIN FIVETRAN_DATABASE.DWH.DIM_ADDRESS ADDR2 ON
		STG.SHIP_TO_ADDRESS_ID = ADDR2.ADDRESS_ID
		AND ADDR2.ACTIVE_FLAG = 'Y'
	LEFT JOIN FIVETRAN_DATABASE.DWH.DIM_DATE PRC ON
		STG.ORDER_PURCHASE_DATE = PRC.D_DATE
	LEFT JOIN FIVETRAN_DATABASE.DWH.DIM_DATE SHP ON
		STG.ORDER_SHIP_DATE = SHP.D_DATE
	LEFT JOIN FIVETRAN_DATABASE.DWH.DIM_DATE DUE ON
		STG.ORDER_DUE_DATE = DUE.D_DATE
	LEFT JOIN FIVETRAN_DATABASE.DWH.DIM_TAX TAX ON
		TRIM(ADDR.COUNTRY) = TRIM(TAX.COUNTRY_NAME)
		AND TRIM(ADDR.STATE) = TRIM(TAX.STATE_CODE)
		AND TAX.ACTIVE_FLAG = 'Y'
	WHERE STG."_FIVETRAN_SYNCED" > (SELECT MAX(CREATE_DATE) FROM FIVETRAN_DATABASE.DWH.FACT_SALES)
) A;

COMMIT;

/*
    Uncomment the line below to remove records with null `id` values
*/

-- where id is not null
